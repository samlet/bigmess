// This file is generated by rust-protobuf 2.5.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct TaFieldValue {
    // message fields
    pub blobType: ::std::string::String,
    // message oneof groups
    pub valueOf: ::std::option::Option<TaFieldValue_oneof_valueOf>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TaFieldValue {
    fn default() -> &'a TaFieldValue {
        <TaFieldValue as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum TaFieldValue_oneof_valueOf {
    stringVal(::std::string::String),
    doubleVal(f64),
    intVal(i64),
    blob(::std::vec::Vec<u8>),
}

impl TaFieldValue {
    pub fn new() -> TaFieldValue {
        ::std::default::Default::default()
    }

    // string stringVal = 1;


    pub fn get_stringVal(&self) -> &str {
        match self.valueOf {
            ::std::option::Option::Some(TaFieldValue_oneof_valueOf::stringVal(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_stringVal(&mut self) {
        self.valueOf = ::std::option::Option::None;
    }

    pub fn has_stringVal(&self) -> bool {
        match self.valueOf {
            ::std::option::Option::Some(TaFieldValue_oneof_valueOf::stringVal(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_stringVal(&mut self, v: ::std::string::String) {
        self.valueOf = ::std::option::Option::Some(TaFieldValue_oneof_valueOf::stringVal(v))
    }

    // Mutable pointer to the field.
    pub fn mut_stringVal(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(TaFieldValue_oneof_valueOf::stringVal(_)) = self.valueOf {
        } else {
            self.valueOf = ::std::option::Option::Some(TaFieldValue_oneof_valueOf::stringVal(::std::string::String::new()));
        }
        match self.valueOf {
            ::std::option::Option::Some(TaFieldValue_oneof_valueOf::stringVal(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_stringVal(&mut self) -> ::std::string::String {
        if self.has_stringVal() {
            match self.valueOf.take() {
                ::std::option::Option::Some(TaFieldValue_oneof_valueOf::stringVal(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // double doubleVal = 2;


    pub fn get_doubleVal(&self) -> f64 {
        match self.valueOf {
            ::std::option::Option::Some(TaFieldValue_oneof_valueOf::doubleVal(v)) => v,
            _ => 0.,
        }
    }
    pub fn clear_doubleVal(&mut self) {
        self.valueOf = ::std::option::Option::None;
    }

    pub fn has_doubleVal(&self) -> bool {
        match self.valueOf {
            ::std::option::Option::Some(TaFieldValue_oneof_valueOf::doubleVal(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_doubleVal(&mut self, v: f64) {
        self.valueOf = ::std::option::Option::Some(TaFieldValue_oneof_valueOf::doubleVal(v))
    }

    // int64 intVal = 3;


    pub fn get_intVal(&self) -> i64 {
        match self.valueOf {
            ::std::option::Option::Some(TaFieldValue_oneof_valueOf::intVal(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_intVal(&mut self) {
        self.valueOf = ::std::option::Option::None;
    }

    pub fn has_intVal(&self) -> bool {
        match self.valueOf {
            ::std::option::Option::Some(TaFieldValue_oneof_valueOf::intVal(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_intVal(&mut self, v: i64) {
        self.valueOf = ::std::option::Option::Some(TaFieldValue_oneof_valueOf::intVal(v))
    }

    // bytes blob = 4;


    pub fn get_blob(&self) -> &[u8] {
        match self.valueOf {
            ::std::option::Option::Some(TaFieldValue_oneof_valueOf::blob(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_blob(&mut self) {
        self.valueOf = ::std::option::Option::None;
    }

    pub fn has_blob(&self) -> bool {
        match self.valueOf {
            ::std::option::Option::Some(TaFieldValue_oneof_valueOf::blob(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_blob(&mut self, v: ::std::vec::Vec<u8>) {
        self.valueOf = ::std::option::Option::Some(TaFieldValue_oneof_valueOf::blob(v))
    }

    // Mutable pointer to the field.
    pub fn mut_blob(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(TaFieldValue_oneof_valueOf::blob(_)) = self.valueOf {
        } else {
            self.valueOf = ::std::option::Option::Some(TaFieldValue_oneof_valueOf::blob(::std::vec::Vec::new()));
        }
        match self.valueOf {
            ::std::option::Option::Some(TaFieldValue_oneof_valueOf::blob(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_blob(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_blob() {
            match self.valueOf.take() {
                ::std::option::Option::Some(TaFieldValue_oneof_valueOf::blob(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // string blobType = 5;


    pub fn get_blobType(&self) -> &str {
        &self.blobType
    }
    pub fn clear_blobType(&mut self) {
        self.blobType.clear();
    }

    // Param is passed by value, moved
    pub fn set_blobType(&mut self, v: ::std::string::String) {
        self.blobType = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_blobType(&mut self) -> &mut ::std::string::String {
        &mut self.blobType
    }

    // Take field
    pub fn take_blobType(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.blobType, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TaFieldValue {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.valueOf = ::std::option::Option::Some(TaFieldValue_oneof_valueOf::stringVal(is.read_string()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.valueOf = ::std::option::Option::Some(TaFieldValue_oneof_valueOf::doubleVal(is.read_double()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.valueOf = ::std::option::Option::Some(TaFieldValue_oneof_valueOf::intVal(is.read_int64()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.valueOf = ::std::option::Option::Some(TaFieldValue_oneof_valueOf::blob(is.read_bytes()?));
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.blobType)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.blobType.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.blobType);
        }
        if let ::std::option::Option::Some(ref v) = self.valueOf {
            match v {
                &TaFieldValue_oneof_valueOf::stringVal(ref v) => {
                    my_size += ::protobuf::rt::string_size(1, &v);
                },
                &TaFieldValue_oneof_valueOf::doubleVal(v) => {
                    my_size += 9;
                },
                &TaFieldValue_oneof_valueOf::intVal(v) => {
                    my_size += ::protobuf::rt::value_size(3, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &TaFieldValue_oneof_valueOf::blob(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(4, &v);
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.blobType.is_empty() {
            os.write_string(5, &self.blobType)?;
        }
        if let ::std::option::Option::Some(ref v) = self.valueOf {
            match v {
                &TaFieldValue_oneof_valueOf::stringVal(ref v) => {
                    os.write_string(1, v)?;
                },
                &TaFieldValue_oneof_valueOf::doubleVal(v) => {
                    os.write_double(2, v)?;
                },
                &TaFieldValue_oneof_valueOf::intVal(v) => {
                    os.write_int64(3, v)?;
                },
                &TaFieldValue_oneof_valueOf::blob(ref v) => {
                    os.write_bytes(4, v)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TaFieldValue {
        TaFieldValue::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                    "stringVal",
                    TaFieldValue::has_stringVal,
                    TaFieldValue::get_stringVal,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor::<_>(
                    "doubleVal",
                    TaFieldValue::has_doubleVal,
                    TaFieldValue::get_doubleVal,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor::<_>(
                    "intVal",
                    TaFieldValue::has_intVal,
                    TaFieldValue::get_intVal,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                    "blob",
                    TaFieldValue::has_blob,
                    TaFieldValue::get_blob,
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "blobType",
                    |m: &TaFieldValue| { &m.blobType },
                    |m: &mut TaFieldValue| { &mut m.blobType },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TaFieldValue>(
                    "TaFieldValue",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TaFieldValue {
        static mut instance: ::protobuf::lazy::Lazy<TaFieldValue> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TaFieldValue,
        };
        unsafe {
            instance.get(TaFieldValue::new)
        }
    }
}

impl ::protobuf::Clear for TaFieldValue {
    fn clear(&mut self) {
        self.valueOf = ::std::option::Option::None;
        self.valueOf = ::std::option::Option::None;
        self.valueOf = ::std::option::Option::None;
        self.valueOf = ::std::option::Option::None;
        self.blobType.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TaFieldValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaFieldValue {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TaEntityValue {
    // message fields
    pub entityName: ::std::string::String,
    pub mutable: bool,
    pub fields: ::std::collections::HashMap<::std::string::String, TaFieldValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TaEntityValue {
    fn default() -> &'a TaEntityValue {
        <TaEntityValue as ::protobuf::Message>::default_instance()
    }
}

impl TaEntityValue {
    pub fn new() -> TaEntityValue {
        ::std::default::Default::default()
    }

    // string entityName = 1;


    pub fn get_entityName(&self) -> &str {
        &self.entityName
    }
    pub fn clear_entityName(&mut self) {
        self.entityName.clear();
    }

    // Param is passed by value, moved
    pub fn set_entityName(&mut self, v: ::std::string::String) {
        self.entityName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entityName(&mut self) -> &mut ::std::string::String {
        &mut self.entityName
    }

    // Take field
    pub fn take_entityName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.entityName, ::std::string::String::new())
    }

    // bool mutable = 2;


    pub fn get_mutable(&self) -> bool {
        self.mutable
    }
    pub fn clear_mutable(&mut self) {
        self.mutable = false;
    }

    // Param is passed by value, moved
    pub fn set_mutable(&mut self, v: bool) {
        self.mutable = v;
    }

    // repeated .model.TaEntityValue.FieldsEntry fields = 3;


    pub fn get_fields(&self) -> &::std::collections::HashMap<::std::string::String, TaFieldValue> {
        &self.fields
    }
    pub fn clear_fields(&mut self) {
        self.fields.clear();
    }

    // Param is passed by value, moved
    pub fn set_fields(&mut self, v: ::std::collections::HashMap<::std::string::String, TaFieldValue>) {
        self.fields = v;
    }

    // Mutable pointer to the field.
    pub fn mut_fields(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, TaFieldValue> {
        &mut self.fields
    }

    // Take field
    pub fn take_fields(&mut self) -> ::std::collections::HashMap<::std::string::String, TaFieldValue> {
        ::std::mem::replace(&mut self.fields, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for TaEntityValue {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.entityName)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.mutable = tmp;
                },
                3 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<TaFieldValue>>(wire_type, is, &mut self.fields)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.entityName.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.entityName);
        }
        if self.mutable != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<TaFieldValue>>(3, &self.fields);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.entityName.is_empty() {
            os.write_string(1, &self.entityName)?;
        }
        if self.mutable != false {
            os.write_bool(2, self.mutable)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<TaFieldValue>>(3, &self.fields, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TaEntityValue {
        TaEntityValue::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "entityName",
                    |m: &TaEntityValue| { &m.entityName },
                    |m: &mut TaEntityValue| { &mut m.entityName },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "mutable",
                    |m: &TaEntityValue| { &m.mutable },
                    |m: &mut TaEntityValue| { &mut m.mutable },
                ));
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<TaFieldValue>>(
                    "fields",
                    |m: &TaEntityValue| { &m.fields },
                    |m: &mut TaEntityValue| { &mut m.fields },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TaEntityValue>(
                    "TaEntityValue",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TaEntityValue {
        static mut instance: ::protobuf::lazy::Lazy<TaEntityValue> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TaEntityValue,
        };
        unsafe {
            instance.get(TaEntityValue::new)
        }
    }
}

impl ::protobuf::Clear for TaEntityValue {
    fn clear(&mut self) {
        self.entityName.clear();
        self.mutable = false;
        self.fields.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TaEntityValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaEntityValue {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TaEntityValues {
    // message fields
    pub values: ::protobuf::RepeatedField<TaEntityValue>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TaEntityValues {
    fn default() -> &'a TaEntityValues {
        <TaEntityValues as ::protobuf::Message>::default_instance()
    }
}

impl TaEntityValues {
    pub fn new() -> TaEntityValues {
        ::std::default::Default::default()
    }

    // repeated .model.TaEntityValue values = 1;


    pub fn get_values(&self) -> &[TaEntityValue] {
        &self.values
    }
    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: ::protobuf::RepeatedField<TaEntityValue>) {
        self.values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_values(&mut self) -> &mut ::protobuf::RepeatedField<TaEntityValue> {
        &mut self.values
    }

    // Take field
    pub fn take_values(&mut self) -> ::protobuf::RepeatedField<TaEntityValue> {
        ::std::mem::replace(&mut self.values, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TaEntityValues {
    fn is_initialized(&self) -> bool {
        for v in &self.values {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.values)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.values {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TaEntityValues {
        TaEntityValues::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TaEntityValue>>(
                    "values",
                    |m: &TaEntityValues| { &m.values },
                    |m: &mut TaEntityValues| { &mut m.values },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TaEntityValues>(
                    "TaEntityValues",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TaEntityValues {
        static mut instance: ::protobuf::lazy::Lazy<TaEntityValues> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TaEntityValues,
        };
        unsafe {
            instance.get(TaEntityValues::new)
        }
    }
}

impl ::protobuf::Clear for TaEntityValues {
    fn clear(&mut self) {
        self.values.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TaEntityValues {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaEntityValues {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TaStringEntries {
    // message fields
    pub values: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub entityName: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TaStringEntries {
    fn default() -> &'a TaStringEntries {
        <TaStringEntries as ::protobuf::Message>::default_instance()
    }
}

impl TaStringEntries {
    pub fn new() -> TaStringEntries {
        ::std::default::Default::default()
    }

    // repeated .model.TaStringEntries.ValuesEntry values = 1;


    pub fn get_values(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.values
    }
    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_values(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.values
    }

    // Take field
    pub fn take_values(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.values, ::std::collections::HashMap::new())
    }

    // string entityName = 2;


    pub fn get_entityName(&self) -> &str {
        &self.entityName
    }
    pub fn clear_entityName(&mut self) {
        self.entityName.clear();
    }

    // Param is passed by value, moved
    pub fn set_entityName(&mut self, v: ::std::string::String) {
        self.entityName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entityName(&mut self) -> &mut ::std::string::String {
        &mut self.entityName
    }

    // Take field
    pub fn take_entityName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.entityName, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TaStringEntries {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.values)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.entityName)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(1, &self.values);
        if !self.entityName.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.entityName);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(1, &self.values, os)?;
        if !self.entityName.is_empty() {
            os.write_string(2, &self.entityName)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TaStringEntries {
        TaStringEntries::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                    "values",
                    |m: &TaStringEntries| { &m.values },
                    |m: &mut TaStringEntries| { &mut m.values },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "entityName",
                    |m: &TaStringEntries| { &m.entityName },
                    |m: &mut TaStringEntries| { &mut m.entityName },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TaStringEntries>(
                    "TaStringEntries",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TaStringEntries {
        static mut instance: ::protobuf::lazy::Lazy<TaStringEntries> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TaStringEntries,
        };
        unsafe {
            instance.get(TaStringEntries::new)
        }
    }
}

impl ::protobuf::Clear for TaStringEntries {
    fn clear(&mut self) {
        self.values.clear();
        self.entityName.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TaStringEntries {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaStringEntries {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TaStringEntriesBatch {
    // message fields
    pub records: ::protobuf::RepeatedField<TaStringEntries>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TaStringEntriesBatch {
    fn default() -> &'a TaStringEntriesBatch {
        <TaStringEntriesBatch as ::protobuf::Message>::default_instance()
    }
}

impl TaStringEntriesBatch {
    pub fn new() -> TaStringEntriesBatch {
        ::std::default::Default::default()
    }

    // repeated .model.TaStringEntries records = 1;


    pub fn get_records(&self) -> &[TaStringEntries] {
        &self.records
    }
    pub fn clear_records(&mut self) {
        self.records.clear();
    }

    // Param is passed by value, moved
    pub fn set_records(&mut self, v: ::protobuf::RepeatedField<TaStringEntries>) {
        self.records = v;
    }

    // Mutable pointer to the field.
    pub fn mut_records(&mut self) -> &mut ::protobuf::RepeatedField<TaStringEntries> {
        &mut self.records
    }

    // Take field
    pub fn take_records(&mut self) -> ::protobuf::RepeatedField<TaStringEntries> {
        ::std::mem::replace(&mut self.records, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TaStringEntriesBatch {
    fn is_initialized(&self) -> bool {
        for v in &self.records {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.records)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.records {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.records {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TaStringEntriesBatch {
        TaStringEntriesBatch::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TaStringEntries>>(
                    "records",
                    |m: &TaStringEntriesBatch| { &m.records },
                    |m: &mut TaStringEntriesBatch| { &mut m.records },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TaStringEntriesBatch>(
                    "TaStringEntriesBatch",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TaStringEntriesBatch {
        static mut instance: ::protobuf::lazy::Lazy<TaStringEntriesBatch> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TaStringEntriesBatch,
        };
        unsafe {
            instance.get(TaStringEntriesBatch::new)
        }
    }
}

impl ::protobuf::Clear for TaStringEntriesBatch {
    fn clear(&mut self) {
        self.records.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TaStringEntriesBatch {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaStringEntriesBatch {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TaStringEntriesMap {
    // message fields
    pub entries: ::std::collections::HashMap<::std::string::String, TaStringEntries>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TaStringEntriesMap {
    fn default() -> &'a TaStringEntriesMap {
        <TaStringEntriesMap as ::protobuf::Message>::default_instance()
    }
}

impl TaStringEntriesMap {
    pub fn new() -> TaStringEntriesMap {
        ::std::default::Default::default()
    }

    // repeated .model.TaStringEntriesMap.EntriesEntry entries = 1;


    pub fn get_entries(&self) -> &::std::collections::HashMap<::std::string::String, TaStringEntries> {
        &self.entries
    }
    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::std::collections::HashMap<::std::string::String, TaStringEntries>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, TaStringEntries> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::std::collections::HashMap<::std::string::String, TaStringEntries> {
        ::std::mem::replace(&mut self.entries, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for TaStringEntriesMap {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<TaStringEntries>>(wire_type, is, &mut self.entries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<TaStringEntries>>(1, &self.entries);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<TaStringEntries>>(1, &self.entries, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TaStringEntriesMap {
        TaStringEntriesMap::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<TaStringEntries>>(
                    "entries",
                    |m: &TaStringEntriesMap| { &m.entries },
                    |m: &mut TaStringEntriesMap| { &mut m.entries },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TaStringEntriesMap>(
                    "TaStringEntriesMap",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TaStringEntriesMap {
        static mut instance: ::protobuf::lazy::Lazy<TaStringEntriesMap> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TaStringEntriesMap,
        };
        unsafe {
            instance.get(TaStringEntriesMap::new)
        }
    }
}

impl ::protobuf::Clear for TaStringEntriesMap {
    fn clear(&mut self) {
        self.entries.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TaStringEntriesMap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaStringEntriesMap {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TaIdBag {
    // message fields
    pub ids: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TaIdBag {
    fn default() -> &'a TaIdBag {
        <TaIdBag as ::protobuf::Message>::default_instance()
    }
}

impl TaIdBag {
    pub fn new() -> TaIdBag {
        ::std::default::Default::default()
    }

    // repeated string ids = 1;


    pub fn get_ids(&self) -> &[::std::string::String] {
        &self.ids
    }
    pub fn clear_ids(&mut self) {
        self.ids.clear();
    }

    // Param is passed by value, moved
    pub fn set_ids(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.ids = v;
    }

    // Mutable pointer to the field.
    pub fn mut_ids(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.ids
    }

    // Take field
    pub fn take_ids(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.ids, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TaIdBag {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.ids)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.ids {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.ids {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TaIdBag {
        TaIdBag::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ids",
                    |m: &TaIdBag| { &m.ids },
                    |m: &mut TaIdBag| { &mut m.ids },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TaIdBag>(
                    "TaIdBag",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TaIdBag {
        static mut instance: ::protobuf::lazy::Lazy<TaIdBag> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TaIdBag,
        };
        unsafe {
            instance.get(TaIdBag::new)
        }
    }
}

impl ::protobuf::Clear for TaIdBag {
    fn clear(&mut self) {
        self.ids.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TaIdBag {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaIdBag {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TaRecordset {
    // message fields
    pub recordGroups: ::std::collections::HashMap<::std::string::String, TaIdBag>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TaRecordset {
    fn default() -> &'a TaRecordset {
        <TaRecordset as ::protobuf::Message>::default_instance()
    }
}

impl TaRecordset {
    pub fn new() -> TaRecordset {
        ::std::default::Default::default()
    }

    // repeated .model.TaRecordset.RecordGroupsEntry recordGroups = 1;


    pub fn get_recordGroups(&self) -> &::std::collections::HashMap<::std::string::String, TaIdBag> {
        &self.recordGroups
    }
    pub fn clear_recordGroups(&mut self) {
        self.recordGroups.clear();
    }

    // Param is passed by value, moved
    pub fn set_recordGroups(&mut self, v: ::std::collections::HashMap<::std::string::String, TaIdBag>) {
        self.recordGroups = v;
    }

    // Mutable pointer to the field.
    pub fn mut_recordGroups(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, TaIdBag> {
        &mut self.recordGroups
    }

    // Take field
    pub fn take_recordGroups(&mut self) -> ::std::collections::HashMap<::std::string::String, TaIdBag> {
        ::std::mem::replace(&mut self.recordGroups, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for TaRecordset {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<TaIdBag>>(wire_type, is, &mut self.recordGroups)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<TaIdBag>>(1, &self.recordGroups);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<TaIdBag>>(1, &self.recordGroups, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TaRecordset {
        TaRecordset::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<TaIdBag>>(
                    "recordGroups",
                    |m: &TaRecordset| { &m.recordGroups },
                    |m: &mut TaRecordset| { &mut m.recordGroups },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TaRecordset>(
                    "TaRecordset",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TaRecordset {
        static mut instance: ::protobuf::lazy::Lazy<TaRecordset> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TaRecordset,
        };
        unsafe {
            instance.get(TaRecordset::new)
        }
    }
}

impl ::protobuf::Clear for TaRecordset {
    fn clear(&mut self) {
        self.recordGroups.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TaRecordset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaRecordset {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TaJson {
    // message fields
    pub content: ::std::string::String,
    pub dataType: JsonDataType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TaJson {
    fn default() -> &'a TaJson {
        <TaJson as ::protobuf::Message>::default_instance()
    }
}

impl TaJson {
    pub fn new() -> TaJson {
        ::std::default::Default::default()
    }

    // string content = 1;


    pub fn get_content(&self) -> &str {
        &self.content
    }
    pub fn clear_content(&mut self) {
        self.content.clear();
    }

    // Param is passed by value, moved
    pub fn set_content(&mut self, v: ::std::string::String) {
        self.content = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content(&mut self) -> &mut ::std::string::String {
        &mut self.content
    }

    // Take field
    pub fn take_content(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.content, ::std::string::String::new())
    }

    // .model.JsonDataType dataType = 2;


    pub fn get_dataType(&self) -> JsonDataType {
        self.dataType
    }
    pub fn clear_dataType(&mut self) {
        self.dataType = JsonDataType::MAP;
    }

    // Param is passed by value, moved
    pub fn set_dataType(&mut self, v: JsonDataType) {
        self.dataType = v;
    }
}

impl ::protobuf::Message for TaJson {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.content)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.dataType, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.content.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.content);
        }
        if self.dataType != JsonDataType::MAP {
            my_size += ::protobuf::rt::enum_size(2, self.dataType);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.content.is_empty() {
            os.write_string(1, &self.content)?;
        }
        if self.dataType != JsonDataType::MAP {
            os.write_enum(2, self.dataType.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TaJson {
        TaJson::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "content",
                    |m: &TaJson| { &m.content },
                    |m: &mut TaJson| { &mut m.content },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<JsonDataType>>(
                    "dataType",
                    |m: &TaJson| { &m.dataType },
                    |m: &mut TaJson| { &mut m.dataType },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TaJson>(
                    "TaJson",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TaJson {
        static mut instance: ::protobuf::lazy::Lazy<TaJson> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TaJson,
        };
        unsafe {
            instance.get(TaJson::new)
        }
    }
}

impl ::protobuf::Clear for TaJson {
    fn clear(&mut self) {
        self.content.clear();
        self.dataType = JsonDataType::MAP;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TaJson {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaJson {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TaJsonEntity {
    // message fields
    pub entityName: ::std::string::String,
    pub json: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TaJsonEntity {
    fn default() -> &'a TaJsonEntity {
        <TaJsonEntity as ::protobuf::Message>::default_instance()
    }
}

impl TaJsonEntity {
    pub fn new() -> TaJsonEntity {
        ::std::default::Default::default()
    }

    // string entityName = 1;


    pub fn get_entityName(&self) -> &str {
        &self.entityName
    }
    pub fn clear_entityName(&mut self) {
        self.entityName.clear();
    }

    // Param is passed by value, moved
    pub fn set_entityName(&mut self, v: ::std::string::String) {
        self.entityName = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entityName(&mut self) -> &mut ::std::string::String {
        &mut self.entityName
    }

    // Take field
    pub fn take_entityName(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.entityName, ::std::string::String::new())
    }

    // string json = 2;


    pub fn get_json(&self) -> &str {
        &self.json
    }
    pub fn clear_json(&mut self) {
        self.json.clear();
    }

    // Param is passed by value, moved
    pub fn set_json(&mut self, v: ::std::string::String) {
        self.json = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_json(&mut self) -> &mut ::std::string::String {
        &mut self.json
    }

    // Take field
    pub fn take_json(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.json, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TaJsonEntity {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.entityName)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.json)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.entityName.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.entityName);
        }
        if !self.json.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.json);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.entityName.is_empty() {
            os.write_string(1, &self.entityName)?;
        }
        if !self.json.is_empty() {
            os.write_string(2, &self.json)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TaJsonEntity {
        TaJsonEntity::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "entityName",
                    |m: &TaJsonEntity| { &m.entityName },
                    |m: &mut TaJsonEntity| { &mut m.entityName },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "json",
                    |m: &TaJsonEntity| { &m.json },
                    |m: &mut TaJsonEntity| { &mut m.json },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TaJsonEntity>(
                    "TaJsonEntity",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TaJsonEntity {
        static mut instance: ::protobuf::lazy::Lazy<TaJsonEntity> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TaJsonEntity,
        };
        unsafe {
            instance.get(TaJsonEntity::new)
        }
    }
}

impl ::protobuf::Clear for TaJsonEntity {
    fn clear(&mut self) {
        self.entityName.clear();
        self.json.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TaJsonEntity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaJsonEntity {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TaJsonEntities {
    // message fields
    pub entities: ::protobuf::RepeatedField<TaJsonEntity>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TaJsonEntities {
    fn default() -> &'a TaJsonEntities {
        <TaJsonEntities as ::protobuf::Message>::default_instance()
    }
}

impl TaJsonEntities {
    pub fn new() -> TaJsonEntities {
        ::std::default::Default::default()
    }

    // repeated .model.TaJsonEntity entities = 1;


    pub fn get_entities(&self) -> &[TaJsonEntity] {
        &self.entities
    }
    pub fn clear_entities(&mut self) {
        self.entities.clear();
    }

    // Param is passed by value, moved
    pub fn set_entities(&mut self, v: ::protobuf::RepeatedField<TaJsonEntity>) {
        self.entities = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entities(&mut self) -> &mut ::protobuf::RepeatedField<TaJsonEntity> {
        &mut self.entities
    }

    // Take field
    pub fn take_entities(&mut self) -> ::protobuf::RepeatedField<TaJsonEntity> {
        ::std::mem::replace(&mut self.entities, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TaJsonEntities {
    fn is_initialized(&self) -> bool {
        for v in &self.entities {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entities)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entities {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entities {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TaJsonEntities {
        TaJsonEntities::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<TaJsonEntity>>(
                    "entities",
                    |m: &TaJsonEntities| { &m.entities },
                    |m: &mut TaJsonEntities| { &mut m.entities },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TaJsonEntities>(
                    "TaJsonEntities",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TaJsonEntities {
        static mut instance: ::protobuf::lazy::Lazy<TaJsonEntities> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TaJsonEntities,
        };
        unsafe {
            instance.get(TaJsonEntities::new)
        }
    }
}

impl ::protobuf::Clear for TaJsonEntities {
    fn clear(&mut self) {
        self.entities.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TaJsonEntities {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TaJsonEntities {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExternalLink {
    // message fields
    pub gid: ::std::string::String,
    pub name: ::std::string::String,
    pub description: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExternalLink {
    fn default() -> &'a ExternalLink {
        <ExternalLink as ::protobuf::Message>::default_instance()
    }
}

impl ExternalLink {
    pub fn new() -> ExternalLink {
        ::std::default::Default::default()
    }

    // string gid = 1;


    pub fn get_gid(&self) -> &str {
        &self.gid
    }
    pub fn clear_gid(&mut self) {
        self.gid.clear();
    }

    // Param is passed by value, moved
    pub fn set_gid(&mut self, v: ::std::string::String) {
        self.gid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gid(&mut self) -> &mut ::std::string::String {
        &mut self.gid
    }

    // Take field
    pub fn take_gid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gid, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string description = 3;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ExternalLink {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.gid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.gid);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.gid.is_empty() {
            os.write_string(1, &self.gid)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExternalLink {
        ExternalLink::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "gid",
                    |m: &ExternalLink| { &m.gid },
                    |m: &mut ExternalLink| { &mut m.gid },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &ExternalLink| { &m.name },
                    |m: &mut ExternalLink| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "description",
                    |m: &ExternalLink| { &m.description },
                    |m: &mut ExternalLink| { &mut m.description },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ExternalLink>(
                    "ExternalLink",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ExternalLink {
        static mut instance: ::protobuf::lazy::Lazy<ExternalLink> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ExternalLink,
        };
        unsafe {
            instance.get(ExternalLink::new)
        }
    }
}

impl ::protobuf::Clear for ExternalLink {
    fn clear(&mut self) {
        self.gid.clear();
        self.name.clear();
        self.description.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExternalLink {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExternalLink {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExternalLinks {
    // message fields
    pub links: ::protobuf::RepeatedField<ExternalLink>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExternalLinks {
    fn default() -> &'a ExternalLinks {
        <ExternalLinks as ::protobuf::Message>::default_instance()
    }
}

impl ExternalLinks {
    pub fn new() -> ExternalLinks {
        ::std::default::Default::default()
    }

    // repeated .model.ExternalLink links = 1;


    pub fn get_links(&self) -> &[ExternalLink] {
        &self.links
    }
    pub fn clear_links(&mut self) {
        self.links.clear();
    }

    // Param is passed by value, moved
    pub fn set_links(&mut self, v: ::protobuf::RepeatedField<ExternalLink>) {
        self.links = v;
    }

    // Mutable pointer to the field.
    pub fn mut_links(&mut self) -> &mut ::protobuf::RepeatedField<ExternalLink> {
        &mut self.links
    }

    // Take field
    pub fn take_links(&mut self) -> ::protobuf::RepeatedField<ExternalLink> {
        ::std::mem::replace(&mut self.links, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ExternalLinks {
    fn is_initialized(&self) -> bool {
        for v in &self.links {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.links)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.links {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.links {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExternalLinks {
        ExternalLinks::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ExternalLink>>(
                    "links",
                    |m: &ExternalLinks| { &m.links },
                    |m: &mut ExternalLinks| { &mut m.links },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ExternalLinks>(
                    "ExternalLinks",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ExternalLinks {
        static mut instance: ::protobuf::lazy::Lazy<ExternalLinks> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ExternalLinks,
        };
        unsafe {
            instance.get(ExternalLinks::new)
        }
    }
}

impl ::protobuf::Clear for ExternalLinks {
    fn clear(&mut self) {
        self.links.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExternalLinks {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExternalLinks {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum JsonDataType {
    MAP = 0,
    LIST = 1,
    SCALAR = 2,
}

impl ::protobuf::ProtobufEnum for JsonDataType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<JsonDataType> {
        match value {
            0 => ::std::option::Option::Some(JsonDataType::MAP),
            1 => ::std::option::Option::Some(JsonDataType::LIST),
            2 => ::std::option::Option::Some(JsonDataType::SCALAR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [JsonDataType] = &[
            JsonDataType::MAP,
            JsonDataType::LIST,
            JsonDataType::SCALAR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("JsonDataType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for JsonDataType {
}

impl ::std::default::Default for JsonDataType {
    fn default() -> Self {
        JsonDataType::MAP
    }
}

impl ::protobuf::reflect::ProtobufValue for JsonDataType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cvalues.proto\x12\x05model\"\xa5\x01\n\x0cTaFieldValue\x12\x1e\n\ts\
    tringVal\x18\x01\x20\x01(\tH\0R\tstringVal\x12\x1e\n\tdoubleVal\x18\x02\
    \x20\x01(\x01H\0R\tdoubleVal\x12\x18\n\x06intVal\x18\x03\x20\x01(\x03H\0\
    R\x06intVal\x12\x14\n\x04blob\x18\x04\x20\x01(\x0cH\0R\x04blob\x12\x1a\n\
    \x08blobType\x18\x05\x20\x01(\tR\x08blobTypeB\t\n\x07valueOf\"\xd3\x01\n\
    \rTaEntityValue\x12\x1e\n\nentityName\x18\x01\x20\x01(\tR\nentityName\
    \x12\x18\n\x07mutable\x18\x02\x20\x01(\x08R\x07mutable\x128\n\x06fields\
    \x18\x03\x20\x03(\x0b2\x20.model.TaEntityValue.FieldsEntryR\x06fields\
    \x1aN\n\x0bFieldsEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12)\
    \n\x05value\x18\x02\x20\x01(\x0b2\x13.model.TaFieldValueR\x05value:\x028\
    \x01\">\n\x0eTaEntityValues\x12,\n\x06values\x18\x01\x20\x03(\x0b2\x14.m\
    odel.TaEntityValueR\x06values\"\xa8\x01\n\x0fTaStringEntries\x12:\n\x06v\
    alues\x18\x01\x20\x03(\x0b2\".model.TaStringEntries.ValuesEntryR\x06valu\
    es\x12\x1e\n\nentityName\x18\x02\x20\x01(\tR\nentityName\x1a9\n\x0bValue\
    sEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\
    \x18\x02\x20\x01(\tR\x05value:\x028\x01\"H\n\x14TaStringEntriesBatch\x12\
    0\n\x07records\x18\x01\x20\x03(\x0b2\x16.model.TaStringEntriesR\x07recor\
    ds\"\xaa\x01\n\x12TaStringEntriesMap\x12@\n\x07entries\x18\x01\x20\x03(\
    \x0b2&.model.TaStringEntriesMap.EntriesEntryR\x07entries\x1aR\n\x0cEntri\
    esEntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12,\n\x05value\x18\
    \x02\x20\x01(\x0b2\x16.model.TaStringEntriesR\x05value:\x028\x01\"\x1b\n\
    \x07TaIdBag\x12\x10\n\x03ids\x18\x01\x20\x03(\tR\x03ids\"\xa8\x01\n\x0bT\
    aRecordset\x12H\n\x0crecordGroups\x18\x01\x20\x03(\x0b2$.model.TaRecords\
    et.RecordGroupsEntryR\x0crecordGroups\x1aO\n\x11RecordGroupsEntry\x12\
    \x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12$\n\x05value\x18\x02\x20\x01\
    (\x0b2\x0e.model.TaIdBagR\x05value:\x028\x01\"S\n\x06TaJson\x12\x18\n\
    \x07content\x18\x01\x20\x01(\tR\x07content\x12/\n\x08dataType\x18\x02\
    \x20\x01(\x0e2\x13.model.JsonDataTypeR\x08dataType\"B\n\x0cTaJsonEntity\
    \x12\x1e\n\nentityName\x18\x01\x20\x01(\tR\nentityName\x12\x12\n\x04json\
    \x18\x02\x20\x01(\tR\x04json\"A\n\x0eTaJsonEntities\x12/\n\x08entities\
    \x18\x01\x20\x03(\x0b2\x13.model.TaJsonEntityR\x08entities\"V\n\x0cExter\
    nalLink\x12\x10\n\x03gid\x18\x01\x20\x01(\tR\x03gid\x12\x12\n\x04name\
    \x18\x02\x20\x01(\tR\x04name\x12\x20\n\x0bdescription\x18\x03\x20\x01(\t\
    R\x0bdescription\":\n\rExternalLinks\x12)\n\x05links\x18\x01\x20\x03(\
    \x0b2\x13.model.ExternalLinkR\x05links*-\n\x0cJsonDataType\x12\x07\n\x03\
    MAP\x10\0\x12\x08\n\x04LIST\x10\x01\x12\n\n\x06SCALAR\x10\x02B\x18\n\x14\
    com.sagas.meta.modelP\x01b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
